/*
 * Compiler Design Concepts
 * Author: Edwin Lopez
 * Key Concepts:
 *  - Lexical analysis (tokenization)
 *  - Parsing (recursive-descent parser for arithmetic expressions)
 *  - Intermediate representation (three-address code)
 *  - Syntax tree construction
 *  - Code optimization (value numbering)
 *  - Semantic analysis (attribute grammar)
 *  - Memory management (heap allocation using pointers)
 */

#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <map>
#include <regex>
using namespace std;

// Token structure for lexical analysis
struct Token {
    string type;
    string value;
};

// ------------------- LEXICAL ANALYSIS -------------------
// Lexical Analyzer: Tokenizes input string into operators, identifiers, and numbers
vector<Token> tokenize(string input) {
    vector<Token> tokens;
    regex token_pattern("(\\d+|[a-zA-Z_][a-zA-Z0-9_]*|[+\\-*/=()])");
    auto words_begin = sregex_iterator(input.begin(), input.end(), token_pattern);
    auto words_end = sregex_iterator();

    for (sregex_iterator i = words_begin; i != words_end; ++i) {
        string token_value = (*i).str();
        if (regex_match(token_value, regex("\\d+"))) {
            tokens.push_back({"NUMBER", token_value});
        } else if (regex_match(token_value, regex("[a-zA-Z_][a-zA-Z0-9_]*"))) {
            tokens.push_back({"IDENTIFIER", token_value});
        } else {
            tokens.push_back({"OPERATOR", token_value});
        }
    }
    return tokens;
}

// ------------------- PARSING (RECURSIVE DESCENT) -------------------
// Recursive-Descent Parser for basic arithmetic expressions: a + b * c
struct Node {
    string value;
    Node* left;
    Node* right;
    Node(string v) : value(v), left(nullptr), right(nullptr) {}
};

class Parser {
    vector<Token> tokens;
    int currentTokenIndex = 0;

    Token currentToken() {
        return tokens[currentTokenIndex];
    }

    void consume() {
        currentTokenIndex++;
    }

public:
    Parser(vector<Token> t) : tokens(t) {}

    // Parsing entry point
    Node* parseExpression() {
        Node* termNode = parseTerm();
        while (currentToken().value == "+" || currentToken().value == "-") {
            string op = currentToken().value;
            consume();
            termNode = new Node(op, termNode, parseTerm());
        }
        return termNode;
    }

    Node* parseTerm() {
        Node* factorNode = parseFactor();
        while (currentToken().value == "*" || currentToken().value == "/") {
            string op = currentToken().value;
            consume();
            factorNode = new Node(op, factorNode, parseFactor());
        }
        return factorNode;
    }

    Node* parseFactor() {
        if (currentToken().type == "NUMBER" || currentToken().type == "IDENTIFIER") {
            string value = currentToken().value;
            consume();
            return new Node(value);
        }
        return nullptr; // Simplified for this example
    }
};

// ------------------- INTERMEDIATE REPRESENTATION (IR) -------------------
// Generates three-address code for simple expressions
void generateThreeAddressCode(Node* node) {
    if (node == nullptr) return;
    generateThreeAddressCode(node->left);
    generateThreeAddressCode(node->right);
    if (node->left && node->right) {
        cout << "t = " << node->left->value << " " << node->value << " " << node->right->value << endl;
    }
}

// ------------------- SYNTAX TREE PRINTING -------------------
void printSyntaxTree(Node* node, int depth = 0) {
    if (node == nullptr) return;
    printSyntaxTree(node->right, depth + 1);
    cout << string(depth * 4, ' ') << node->value << endl;
    printSyntaxTree(node->left, depth + 1);
}

// ------------------- CODE OPTIMIZATION (VALUE NUMBERING) -------------------
// Simplified optimization for redundant operations
void optimizeCode(Node* node) {
    if (node == nullptr) return;
    map<string, string> valueNumberTable;
    if (node->left && node->right) {
        string leftVal = node->left->value;
        string rightVal = node->right->value;
        if (valueNumberTable[leftVal] == rightVal) {
            cout << "Optimization: Eliminating redundant operation: " << node->value << endl;
        } else {
            valueNumberTable[leftVal] = rightVal;
        }
    }
    optimizeCode(node->left);
    optimizeCode(node->right);
}

// ------------------- MEMORY MANAGEMENT -------------------
// Dynamic memory allocation example (simulating heap memory allocation in C++)
void memoryManagementExample() {
    int* dynamicArray = new int[10]; // Allocate array on heap
    for (int i = 0; i < 10; ++i) {
        dynamicArray[i] = i * 2;
    }
    cout << "Dynamic memory allocation (heap):" << endl;
    for (int i = 0; i < 10; ++i) {
        cout << dynamicArray[i] << " ";
    }
    cout << endl;
    delete[] dynamicArray; // Free heap memory
}

int main() {
    // Lexical Analysis
    string input = "a + b * c";
    vector<Token> tokens = tokenize(input);
    cout << "Lexical Analysis (Tokens):" << endl;
    for (const Token& token : tokens) {
        cout << token.type << ": " << token.value << endl;
    }

    // Parsing
    Parser parser(tokens);
    Node* root = parser.parseExpression();
    cout << "\nSyntax Tree:" << endl;
    printSyntaxTree(root);

    // Intermediate Representation (Three-Address Code)
    cout << "\nThree-Address Code:" << endl;
    generateThreeAddressCode(root);

    // Optimization (Value Numbering)
    cout << "\nCode Optimization:" << endl;
    optimizeCode(root);

    // Memory Management Example
    cout << "\nMemory Management:" << endl;
    memoryManagementExample();

    return 0;
}
